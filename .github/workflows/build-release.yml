name: Build & Release (VS Code Extension)

on:
  push:
    branches: [main]
  workflow_dispatch: {}

env:
  OUTPUT_DIR: dist                # npm run deploy 산출물 위치
  COLLECT_DIR: release            # 아티팩트 모을 폴더
  APP_ID: lge.homey-edgetool
  APP_BASENAME: homey-edgetool    # 산출 파일 접두사

jobs:
  precheck_version_gate:
    name: Precheck (version gate)
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.set.outputs.BUILD }}
      version: ${{ steps.set.outputs.VERSION }}
    steps:
      - name: Checkout (need previous commit too)
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Read current version
        id: curr
        run: |
          echo "CURR_VERSION=$(node -p "require('./package.json').version || '0.0.0'")" >> $GITHUB_ENV
          echo "CURR_VERSION=$CURR_VERSION"

      - name: Decide BUILD (dispatch = always build)
        id: decide
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "BUILD=1" >> $GITHUB_ENV
            exit 0
          fi

          # Try to read previous version from prior commit
          PREV_VERSION=$(git show HEAD^:package.json 2>/dev/null | node -e "
            let s='';process.stdin.on('data',d=>s+=d).on('end',()=>{
              try{console.log(JSON.parse(s).version || '0.0.0')}catch(e){console.log('0.0.0')}
            });
          ")

          echo "PREV_VERSION=$PREV_VERSION"
          echo "CURR_VERSION=$CURR_VERSION"

          COMP=$(node -e "
            function parse(v){return String(v).split('.').map(n=>parseInt(n||0,10));}
            const a=parse(process.env.CURR_VERSION), b=parse(process.env.PREV_VERSION);
            let r=0; for(let i=0;i<3;i++){const d=(a[i]||0)-(b[i]||0); if(d){r=d>0?1:-1;break}}
            console.log(r);
          ")

          BUILD=0
          if [ "$COMP" = "1" ]; then BUILD=1; fi
          echo "BUILD=$BUILD" >> $GITHUB_ENV
        env:
          CURR_VERSION: ${{ env.CURR_VERSION }}

      - name: Set step outputs
        id: set
        run: |
          echo "BUILD=${BUILD}" >> $GITHUB_OUTPUT
          echo "VERSION=${CURR_VERSION}" >> $GITHUB_OUTPUT

  build_on_main:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [precheck_version_gate]
    if: needs.precheck_version_gate.outputs.build == '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build (npm run deploy)
        run: npm run deploy

      - name: Collect VSIX
        id: collect
        shell: bash
        env:
          VERSION: ${{ needs.precheck_version_gate.outputs.version }}
          OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
          COLLECT_DIR: ${{ env.COLLECT_DIR }}
          APP_BASENAME: ${{ env.APP_BASENAME }}
        run: |
          set -e
          mkdir -p "$COLLECT_DIR"
          VSIX_NAME="${APP_BASENAME}-${VERSION}.vsix"
          FOUND_VSIX=$(find "$OUTPUT_DIR" . -maxdepth 3 -type f -name "*.vsix" | head -n 1 || true)
          if [ -z "$FOUND_VSIX" ]; then
            echo "*.vsix 파일을 찾지 못했습니다." >&2
            exit 1
          fi
          cp "$FOUND_VSIX" "$COLLECT_DIR/$VSIX_NAME"
          echo "VSIX_NAME=$VSIX_NAME" >> $GITHUB_OUTPUT

      - name: Compute SHA256
        id: sha
        run: |
          FILE="${{ env.COLLECT_DIR }}/${{ steps.collect.outputs.VSIX_NAME }}"
          if command -v sha256sum >/dev/null 2>&1; then
            SHA256=$(sha256sum "$FILE" | awk '{print $1}')
          else
            SHA256=$(shasum -a 256 "$FILE" | awk '{print $1}')
          fi
          echo "SHA256=$SHA256" >> $GITHUB_OUTPUT

      - name: Make latest.json
        id: latest
        shell: bash
        env:
          VERSION: ${{ needs.precheck_version_gate.outputs.version }}
          COLLECT_DIR: ${{ env.COLLECT_DIR }}
          APP_ID: ${{ env.APP_ID }}
          APP_BASENAME: ${{ env.APP_BASENAME }}
          REPO: ${{ github.repository }}
        run: |
          VSIX_NAME="${APP_BASENAME}-${VERSION}.vsix"
          # GitHub Release의 자산(Asset) 영구 URL (tag v<version>)
          VSIX_URL="https://github.com/${REPO}/releases/download/v${VERSION}/${VSIX_NAME}"
          cat > "${COLLECT_DIR}/latest.json" <<EOF
          {
            "id": "${APP_ID}",
            "version": "${VERSION}",
            "url": "${VSIX_URL}",
            "sha256": "${{ steps.sha.outputs.SHA256 }}"
          }
          EOF
          echo "VSIX_URL=$VSIX_URL" >> $GITHUB_OUTPUT
          echo "latest.json ====="
          cat "${COLLECT_DIR}/latest.json"
          echo "================="

      - name: Upload artifact (build outputs)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COLLECT_DIR }}
          path: ${{ env.COLLECT_DIR }}/

      - name: Create GitHub Release (tag v<version>) and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.precheck_version_gate.outputs.version }}
          name: v${{ needs.precheck_version_gate.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ${{ env.COLLECT_DIR }}/${{ steps.collect.outputs.VSIX_NAME }}
            ${{ env.COLLECT_DIR }}/latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

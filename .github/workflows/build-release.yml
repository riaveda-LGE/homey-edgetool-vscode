# .github/workflows/build-release.yml
name: Release (manual)

on:
  workflow_dispatch: {}

permissions:
  contents: write

env:
  OUTPUT_DIR: dist
  COLLECT_DIR: release
  APP_ID: lge.homey-edgetool
  APP_BASENAME: homey-edgetool
  NODE_VERSION: 20

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (need tags ops)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build (npm run deploy)
        run: npm run deploy

      - name: Read version from package.json
        id: ver
        run: |
          VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Ensure tag v<version> exists (create & push if missing)
        env:
          VERSION: ${{ steps.ver.outputs.VERSION }}
        run: |
          set -e
          TAG="v${VERSION}"
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "Remote tag ${TAG} already exists."
          else
            echo "Create and push tag ${TAG}"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag "${TAG}" "${GITHUB_SHA}"
            git push origin "${TAG}"
          fi

      - name: Collect VSIX
        id: collect
        shell: bash
        env:
          VERSION: ${{ steps.ver.outputs.VERSION }}
          OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
          COLLECT_DIR: ${{ env.COLLECT_DIR }}
          APP_BASENAME: ${{ env.APP_BASENAME }}
        run: |
          set -e
          mkdir -p "$COLLECT_DIR"
          VSIX_NAME="${APP_BASENAME}-${VERSION}.vsix"
          FOUND_VSIX=$(find "$OUTPUT_DIR" . -maxdepth 3 -type f -name "*.vsix" | head -n 1 || true)
          if [ -z "$FOUND_VSIX" ]; then
            echo "*.vsix 파일을 찾지 못했습니다." >&2
            exit 1
          fi
          cp "$FOUND_VSIX" "$COLLECT_DIR/$VSIX_NAME"
          echo "VSIX_NAME=$VSIX_NAME" >> $GITHUB_OUTPUT

      - name: Compute SHA256
        id: sha
        run: |
          FILE="${{ env.COLLECT_DIR }}/${{ steps.collect.outputs.VSIX_NAME }}"
          if command -v sha256sum >/dev/null 2>&1; then
            SHA256=$(sha256sum "$FILE" | awk '{print $1}')
          else
            SHA256=$(shasum -a 256 "$FILE" | awk '{print $1}')
          fi
          echo "SHA256=$SHA256" >> $GITHUB_OUTPUT

      - name: Make latest.json
        id: latest
        shell: bash
        env:
          VERSION: ${{ steps.ver.outputs.VERSION }}
          COLLECT_DIR: ${{ env.COLLECT_DIR }}
          APP_ID: ${{ env.APP_ID }}
          APP_BASENAME: ${{ env.APP_BASENAME }}
          REPO: ${{ github.repository }}
        run: |
          VSIX_NAME="${APP_BASENAME}-${VERSION}.vsix"
          VSIX_URL="https://github.com/${REPO}/releases/download/v${VERSION}/${VSIX_NAME}"
          cat > "${COLLECT_DIR}/latest.json" <<EOF
          {
            "id": "${APP_ID}",
            "version": "${VERSION}",
            "url": "${VSIX_URL}",
            "sha256": "${{ steps.sha.outputs.SHA256 }}"
          }
          EOF
          echo "VSIX_URL=$VSIX_URL" >> $GITHUB_OUTPUT
          echo "latest.json ====="
          cat "${COLLECT_DIR}/latest.json"
          echo "================="

      - name: Create GitHub Release (tag v<version>) and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.VERSION }}
          name: v${{ steps.ver.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ env.COLLECT_DIR }}/${{ steps.collect.outputs.VSIX_NAME }}
            ${{ env.COLLECT_DIR }}/latest.json
        # GITHUB_TOKEN은 GitHub가 자동 주입. 별도 개인 토큰 불필요(공개 리포).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

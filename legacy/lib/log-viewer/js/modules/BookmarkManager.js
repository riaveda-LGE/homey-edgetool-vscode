/**
 * BookmarkManager - Î∂ÅÎßàÌÅ¨ Í¥ÄÎ¶¨ Î∞è Îπ†Î•∏ Ï†êÌîÑ Í∏∞Îä•
 * 
 * Í∏∞Îä•:
 * - ÎçîÎ∏îÌÅ¥Î¶≠ÏúºÎ°ú Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞Ä/Ï†úÍ±∞
 * - ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú Î∂ÅÎßàÌÅ¨ Î™©Î°ù Í¥ÄÎ¶¨
 * - Î∂ÅÎßàÌÅ¨ ÏúÑÏπòÎ°ú Îπ†Î•∏ Ï†êÌîÑ
 * - Î∂ÅÎßàÌÅ¨ ÏòÅÍµ¨ Ï†ÄÏû• (localStorage)
 */
export default class BookmarkManager {
    constructor({ eventBus, appState, moduleLoader }) {
        this.eventBus = eventBus;
        this.appState = appState;
        this.moduleLoader = moduleLoader;
        
        // Î∂ÅÎßàÌÅ¨ ÏÉÅÌÉú
        this.bookmarks = new Map(); // logId -> bookmark info
        this.isSidebarVisible = false;
        
        // DOM ÏöîÏÜåÎì§
        this.bookmarkToggleBtn = null;
        this.bookmarkSidebar = null;
        this.bookmarkList = null;
        this.bookmarkCounter = null;
        
        // Î∂ÅÎßàÌÅ¨ ÏïÑÏù¥ÏΩò
        this.bookmarkIcon = 'üìñ';
        this.unbookmarkIcon = 'üîñ';
    }
    
    async init() {
        this.initElements();
        this.bindEvents();
        this.loadBookmarks();
        this.updateBookmarkDisplay();
        
        console.log('üìñ BookmarkManager Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }
    
    initElements() {
        this.bookmarkToggleBtn = document.getElementById('bookmarkToggle');
        this.bookmarkSidebar = document.querySelector('.bookmark-sidebar');
        this.bookmarkList = document.querySelector('.bookmark-list');
        this.bookmarkCounter = document.querySelector('.bookmark-counter');
        
        if (!this.bookmarkToggleBtn) {
            console.error('‚ùå Î∂ÅÎßàÌÅ¨ ÌÜ†Í∏Ä Î≤ÑÌäºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§');
        }
    }
    
    bindEvents() {
        // Ïù¥Î≤§Ìä∏ Íµ¨ÎèÖ
        this.eventBus.subscribe('log:received', this.handleNewLog.bind(this));
        this.eventBus.subscribe('log:double-click', this.handleLogDoubleClick.bind(this));
        
        // Î∂ÅÎßàÌÅ¨ ÌÜ†Í∏Ä Î≤ÑÌäº
        if (this.bookmarkToggleBtn) {
            this.bookmarkToggleBtn.addEventListener('click', this.toggleSidebar.bind(this));
        }
        
        // Î∂ÅÎßàÌÅ¨ Î¶¨Ïä§Ìä∏ Ïù¥Î≤§Ìä∏ (Ïù¥Î≤§Ìä∏ ÏúÑÏûÑ)
        if (this.bookmarkList) {
            this.bookmarkList.addEventListener('dblclick', this.handleBookmarkDoubleClick.bind(this));
            this.bookmarkList.addEventListener('click', this.handleBookmarkClick.bind(this));
        }
        
        // Î©îÏù∏ Î°úÍ∑∏ ÌÖåÏù¥Î∏î ÎçîÎ∏îÌÅ¥Î¶≠ Í∞êÏßÄÎ•º ÏúÑÌïú Ïù¥Î≤§Ìä∏ ÏúÑÏûÑ
        document.addEventListener('dblclick', this.handleMainLogDoubleClick.bind(this));
    }
    
    handleMainLogDoubleClick(e) {
        // Î°úÍ∑∏ Ìñâ ÎçîÎ∏îÌÅ¥Î¶≠ Í∞êÏßÄ
        const logRow = e.target.closest('.log-row');
        if (!logRow) return;
        
        const logId = logRow.dataset.logId;
        if (!logId) return;
        
        // Î∂ÅÎßàÌÅ¨ ÌÜ†Í∏Ä
        this.toggleBookmark(parseInt(logId));
        
        // Îã§Î•∏ Ìï∏Îì§Îü¨Îì§Ïù¥ Ïã§ÌñâÎêòÏßÄ ÏïäÎèÑÎ°ù Ïù¥Î≤§Ìä∏ Ï†ÑÌåå Ï§ëÎã®
        e.stopPropagation();
    }
    
    handleLogDoubleClick(data) {
        const { logId } = data;
        this.toggleBookmark(logId);
    }
    
    handleNewLog(logEntry) {
        // ÏÉà Î°úÍ∑∏Í∞Ä Î∂ÅÎßàÌÅ¨Îêú Í≤ΩÏö∞ UI ÏóÖÎç∞Ïù¥Ìä∏
        if (this.bookmarks.has(logEntry.id)) {
            this.updateBookmarkDisplay();
        }
    }
    
    toggleBookmark(logId) {
        if (this.bookmarks.has(logId)) {
            this.removeBookmark(logId);
        } else {
            this.addBookmark(logId);
        }
    }
    
    addBookmark(logId) {
        // Î°úÍ∑∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const logEntry = this.getLogEntry(logId);
        if (!logEntry) {
            console.warn(`Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞Ä Ïã§Ìå®: Î°úÍ∑∏ ID ${logId}Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§`);
            return;
        }
        
        const bookmark = {
            id: logId,
            timestamp: logEntry.timestamp,
            level: logEntry.level,
            tag: logEntry.tag,
            message: logEntry.message,
            createdAt: new Date().toISOString(),
            title: this.generateBookmarkTitle(logEntry)
        };
        
        this.bookmarks.set(logId, bookmark);
        this.saveBookmarks();
        this.updateBookmarkDisplay();
        this.updateLogRowBookmarkIcon(logId, true);
        
        // Ïù¥Î≤§Ìä∏ Î∞úÌñâ
        this.eventBus.publish('bookmark:added', { logId, bookmark });
        
        console.log(`üìñ Î∂ÅÎßàÌÅ¨ Ï∂îÍ∞Ä: ${logId} - ${bookmark.title}`);
    }
    
    removeBookmark(logId) {
        const bookmark = this.bookmarks.get(logId);
        if (!bookmark) return;
        
        this.bookmarks.delete(logId);
        this.saveBookmarks();
        this.updateBookmarkDisplay();
        this.updateLogRowBookmarkIcon(logId, false);
        
        // Ïù¥Î≤§Ìä∏ Î∞úÌñâ
        this.eventBus.publish('bookmark:removed', { logId, bookmark });
        
        console.log(`üìñ Î∂ÅÎßàÌÅ¨ Ï†úÍ±∞: ${logId} - ${bookmark.title}`);
    }
    
    generateBookmarkTitle(logEntry) {
        const timestamp = new Date(logEntry.timestamp).toLocaleTimeString('ko-KR', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
        });
        
        const level = logEntry.level || '';
        const tag = logEntry.tag || '';
        const message = logEntry.message || '';
        
        // Î©îÏãúÏßÄÎ•º 30ÏûêÎ°ú Ï†úÌïú
        const truncatedMessage = message.length > 30 
            ? message.substring(0, 30) + '...' 
            : message;
        
        return `${timestamp} [${level}] ${tag}: ${truncatedMessage}`;
    }
    
    getLogEntry(logId) {
        // LogViewerÏóêÏÑú Î°úÍ∑∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const logViewer = this.moduleLoader?.getModule('LogViewer');
        return logViewer?.getLogById(logId);
    }
    
    updateLogRowBookmarkIcon(logId, isBookmarked) {
        const logRow = document.querySelector(`[data-log-id="${logId}"]`);
        if (!logRow) return;
        
        const bookmarkCell = logRow.querySelector('.bookmark-cell');
        if (bookmarkCell) {
            bookmarkCell.textContent = isBookmarked ? this.bookmarkIcon : this.unbookmarkIcon;
            bookmarkCell.classList.toggle('bookmarked', isBookmarked);
        }
    }
    
    updateBookmarkDisplay() {
        this.updateBookmarkList();
        this.updateBookmarkCounter();
        this.updateToggleButton();
    }
    
    updateBookmarkList() {
        if (!this.bookmarkList) return;
        
        // Î∂ÅÎßàÌÅ¨Î•º ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨ (ÏµúÏã†Ïàú)
        const sortedBookmarks = Array.from(this.bookmarks.values())
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
        
        this.bookmarkList.innerHTML = '';
        
        if (sortedBookmarks.length === 0) {
            const emptyMessage = document.createElement('div');
            emptyMessage.className = 'bookmark-empty';
            emptyMessage.textContent = 'Î∂ÅÎßàÌÅ¨Îêú Î°úÍ∑∏Í∞Ä ÏóÜÏäµÎãàÎã§';
            this.bookmarkList.appendChild(emptyMessage);
            return;
        }
        
        sortedBookmarks.forEach(bookmark => {
            const bookmarkItem = this.createBookmarkItem(bookmark);
            this.bookmarkList.appendChild(bookmarkItem);
        });
    }
    
    createBookmarkItem(bookmark) {
        const item = document.createElement('div');
        item.className = 'bookmark-item';
        item.dataset.logId = bookmark.id;
        
        const timestamp = new Date(bookmark.timestamp).toLocaleTimeString('ko-KR', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
        });
        
        const levelClass = bookmark.level ? bookmark.level.toLowerCase() : '';
        
        item.innerHTML = `
            <div class="bookmark-header">
                <span class="bookmark-time">${timestamp}</span>
                <span class="bookmark-level ${levelClass}">${bookmark.level || ''}</span>
                <button class="bookmark-remove" title="Î∂ÅÎßàÌÅ¨ Ï†úÍ±∞">√ó</button>
            </div>
            <div class="bookmark-content">
                <div class="bookmark-tag">${bookmark.tag || ''}</div>
                <div class="bookmark-message" title="${bookmark.message}">${bookmark.message}</div>
            </div>
        `;
        
        return item;
    }
    
    updateBookmarkCounter() {
        const count = this.bookmarks.size;
        
        if (this.bookmarkCounter) {
            this.bookmarkCounter.textContent = count > 0 ? `(${count})` : '';
        }
        
        // Î∂ÅÎßàÌÅ¨ ÌÜ†Í∏Ä Î≤ÑÌäº ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        if (this.bookmarkToggleBtn) {
            const baseText = 'üìñ Î∂ÅÎßàÌÅ¨';
            this.bookmarkToggleBtn.textContent = count > 0 ? `${baseText} (${count})` : baseText;
        }
    }
    
    updateToggleButton() {
        if (!this.bookmarkToggleBtn) return;
        
        this.bookmarkToggleBtn.classList.toggle('active', this.isSidebarVisible);
    }
    
    handleBookmarkDoubleClick(e) {
        const bookmarkItem = e.target.closest('.bookmark-item');
        if (!bookmarkItem) return;
        
        const logId = parseInt(bookmarkItem.dataset.logId);
        this.jumpToBookmark(logId);
    }
    
    handleBookmarkClick(e) {
        // Î∂ÅÎßàÌÅ¨ Ï†úÍ±∞ Î≤ÑÌäº ÌÅ¥Î¶≠
        if (e.target.classList.contains('bookmark-remove')) {
            const bookmarkItem = e.target.closest('.bookmark-item');
            if (bookmarkItem) {
                const logId = parseInt(bookmarkItem.dataset.logId);
                this.removeBookmark(logId);
            }
            return;
        }
        
        // Î∂ÅÎßàÌÅ¨ ÏïÑÏù¥ÌÖú Îã®Ïàú ÌÅ¥Î¶≠ (ÏÑ†ÌÉùÎßå)
        const bookmarkItem = e.target.closest('.bookmark-item');
        if (bookmarkItem) {
            this.selectBookmarkItem(bookmarkItem);
        }
    }
    
    selectBookmarkItem(item) {
        // Í∏∞Ï°¥ ÏÑ†ÌÉù Ìï¥Ï†ú
        document.querySelectorAll('.bookmark-item.selected').forEach(el => {
            el.classList.remove('selected');
        });
        
        // ÏÉà ÏïÑÏù¥ÌÖú ÏÑ†ÌÉù
        item.classList.add('selected');
    }
    
    jumpToBookmark(logId) {
        const bookmark = this.bookmarks.get(logId);
        if (!bookmark) {
            console.warn(`Î∂ÅÎßàÌÅ¨ Ï†êÌîÑ Ïã§Ìå®: Î∂ÅÎßàÌÅ¨ ID ${logId}Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§`);
            return;
        }
        
        // Î©îÏù∏ Î°úÍ∑∏ ÏòÅÏó≠ÏúºÎ°ú Ïä§ÌÅ¨Î°§
        this.eventBus.publish('log:jump-to', { logId });
        
        // ÏÇ¨Ïù¥ÎìúÎ∞î Îã´Í∏∞ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        // this.closeSidebar();
        
        console.log(`üìñ Î∂ÅÎßàÌÅ¨ Ïù¥Îèô: ${logId} - ${bookmark.title}`);
    }
    
    toggleSidebar() {
        this.isSidebarVisible = !this.isSidebarVisible;
        
        if (this.isSidebarVisible) {
            this.showSidebar();
        } else {
            this.hideSidebar();
        }
    }
    
    showSidebar() {
        this.isSidebarVisible = true;
        
        if (this.bookmarkSidebar) {
            this.bookmarkSidebar.classList.remove('hidden');
            this.bookmarkSidebar.classList.add('visible');
        }
        
        this.updateToggleButton();
        this.updateBookmarkDisplay();
        
        // Ïù¥Î≤§Ìä∏ Î∞úÌñâ
        this.eventBus.publish('bookmark:sidebar-shown', {});
        
        console.log('üìñ Î∂ÅÎßàÌÅ¨ ÏÇ¨Ïù¥ÎìúÎ∞î ÌëúÏãú');
    }
    
    hideSidebar() {
        this.isSidebarVisible = false;
        
        if (this.bookmarkSidebar) {
            this.bookmarkSidebar.classList.add('hidden');
            this.bookmarkSidebar.classList.remove('visible');
        }
        
        this.updateToggleButton();
        
        // Ïù¥Î≤§Ìä∏ Î∞úÌñâ
        this.eventBus.publish('bookmark:sidebar-hidden', {});
        
        console.log('üìñ Î∂ÅÎßàÌÅ¨ ÏÇ¨Ïù¥ÎìúÎ∞î Ïà®ÍπÄ');
    }
    
    closeSidebar() {
        this.hideSidebar();
    }
    
    loadBookmarks() {
        const saved = this.appState.get('bookmarks.list');
        if (saved && Array.isArray(saved)) {
            this.bookmarks.clear();
            saved.forEach(bookmark => {
                this.bookmarks.set(bookmark.id, bookmark);
            });
            console.log(`üìñ Î∂ÅÎßàÌÅ¨ Î°úÎìú ÏôÑÎ£å: ${saved.length}Í∞ú`);
        }
    }
    
    saveBookmarks() {
        const bookmarksArray = Array.from(this.bookmarks.values());
        this.appState.set('bookmarks.list', bookmarksArray);
        console.log(`üìñ Î∂ÅÎßàÌÅ¨ Ï†ÄÏû• ÏôÑÎ£å: ${bookmarksArray.length}Í∞ú`);
    }
    
    // Î∂ÅÎßàÌÅ¨ ÎÇ¥Î≥¥ÎÇ¥Í∏∞/Í∞ÄÏ†∏Ïò§Í∏∞
    exportBookmarks() {
        const bookmarksArray = Array.from(this.bookmarks.values());
        const dataStr = JSON.stringify(bookmarksArray, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `edgetool-bookmarks-${new Date().toISOString().slice(0, 10)}.json`;
        link.click();
        
        console.log('üìñ Î∂ÅÎßàÌÅ¨ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏôÑÎ£å');
    }
    
    importBookmarks(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const bookmarksArray = JSON.parse(e.target.result);
                if (Array.isArray(bookmarksArray)) {
                    // Í∏∞Ï°¥ Î∂ÅÎßàÌÅ¨ÏôÄ Î≥ëÌï©
                    bookmarksArray.forEach(bookmark => {
                        this.bookmarks.set(bookmark.id, bookmark);
                    });
                    
                    this.saveBookmarks();
                    this.updateBookmarkDisplay();
                    
                    console.log(`üìñ Î∂ÅÎßàÌÅ¨ Í∞ÄÏ†∏Ïò§Í∏∞ ÏôÑÎ£å: ${bookmarksArray.length}Í∞ú`);
                }
            } catch (error) {
                console.error('Î∂ÅÎßàÌÅ¨ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error);
            }
        };
        reader.readAsText(file);
    }
    
    // Í≥µÍ∞ú API
    getBookmarks() {
        return Array.from(this.bookmarks.values());
    }
    
    getBookmark(logId) {
        return this.bookmarks.get(logId);
    }
    
    hasBookmark(logId) {
        return this.bookmarks.has(logId);
    }
    
    getBookmarkCount() {
        return this.bookmarks.size;
    }
    
    clearAllBookmarks() {
        this.bookmarks.clear();
        this.saveBookmarks();
        this.updateBookmarkDisplay();
        
        // Î™®Îì† Î°úÍ∑∏ ÌñâÏùò Î∂ÅÎßàÌÅ¨ ÏïÑÏù¥ÏΩò ÏóÖÎç∞Ïù¥Ìä∏
        document.querySelectorAll('.log-row').forEach(row => {
            const logId = parseInt(row.dataset.logId);
            this.updateLogRowBookmarkIcon(logId, false);
        });
        
        console.log('üìñ Î™®Îì† Î∂ÅÎßàÌÅ¨ ÏÇ≠Ï†ú');
    }
    
    async destroy() {
        // Ïù¥Î≤§Ìä∏ Íµ¨ÎèÖ Ìï¥Ï†ú
        this.eventBus.unsubscribe('log:received', this.handleNewLog.bind(this));
        this.eventBus.unsubscribe('log:double-click', this.handleLogDoubleClick.bind(this));
        
        // ÏÇ¨Ïù¥ÎìúÎ∞î Ïà®Í∏∞Í∏∞
        this.hideSidebar();
        
        // Î∂ÅÎßàÌÅ¨ Ï†ÄÏû•
        this.saveBookmarks();
        
        console.log('üìñ BookmarkManager Ï†ïÎ¶¨ ÏôÑÎ£å');
    }
}
